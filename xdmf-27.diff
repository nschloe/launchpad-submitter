diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0fe339c..fa9bb5e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,15 +1,15 @@
 project(Xdmf)
-cmake_minimum_required(VERSION 2.6)
+cmake_minimum_required(VERSION 2.8.5)
 
 #Needed to build DSM because relative paths are used to add its libraries
 if (POLICY CMP0015)
-	cmake_policy(SET CMP0015 NEW)
+  cmake_policy(SET CMP0015 NEW)
 endif ()
 
 if(MSVC10)
-	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
-	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
-	SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
+  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
+  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
+  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
 endif()
 
 set(XDMF_LIBNAME "Xdmf" CACHE STRING "Name for this xdmf library to avoid collision")
@@ -26,8 +26,11 @@ configure_file(${CMAKE_CURRENT_SOURCE_DIR}/XdmfConfig.hpp.in
 if (WIN32)
   set(XDMF_STATIC_AND_SHARED OFF)
 else()
-  option(XDMF_STATIC_AND_SHARED
-       "Build both static and shared libraries" ON)
+  option(
+    XDMF_STATIC_AND_SHARED
+    "Build both static and shared libraries"
+    ON
+    )
   mark_as_advanced(FORCE XDMF_STATIC_AND_SHARED)
 endif()
 
@@ -45,12 +48,16 @@ endif ()
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 include_directories(${CMAKE_CURRENT_BINARY_DIR})
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
-list(APPEND CMAKE_MODULE_PATH
+list(
+  APPEND CMAKE_MODULE_PATH
   ${CMAKE_CURRENT_SOURCE_DIR}/CMake
-  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/VersionSuite)
+  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/VersionSuite
+  )
 if(XDMF_BUILD_TESTING)
-  list(APPEND CMAKE_MODULE_PATH
-    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/TestingSuite)
+  list(
+    APPEND CMAKE_MODULE_PATH
+    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/TestingSuite
+    )
 endif()
 
 include(XdmfFunctions)
@@ -61,7 +68,7 @@ get_filename_component(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" ABSOLUTE)
 # RPath
 option(XDMF_SET_RPATH ON)
 if (XDMF_SET_RPATH)
-  set(CMAKE_SKIP_BUILD_RPATH  FALSE)
+  set(CMAKE_SKIP_BUILD_RPATH FALSE)
   set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
   set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib)
   set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
@@ -167,10 +174,11 @@ if(XDMF_WRAP_PYTHON)
     set(swig_extra_generated_files "")
     swig_add_module(${python_name}Python python ${python_name}.i)
     swig_link_libraries(${python_name}Python ${python_name} ${PYTHON_LIBRARIES})
-    set_property(DIRECTORY APPEND PROPERTY
+    set_property(
+      DIRECTORY APPEND PROPERTY
       ADDITIONAL_MAKE_CLEAN_FILES
       ${CMAKE_CURRENT_BINARY_DIR}/${python_name}.pyc
-    )
+      )
 
     if("${ARGN}" STRGREATER "")
       add_dependencies(${python_name} "${ARGN}")
@@ -178,33 +186,50 @@ if(XDMF_WRAP_PYTHON)
 
     if(WIN32)
       if(NOT MSVC10)
-        set_target_properties(${SWIG_MODULE_${python_name}Python_REAL_NAME}
+        set_target_properties(
+          ${SWIG_MODULE_${python_name}Python_REAL_NAME}
           PROPERTIES
           PREFIX ../
           IMPORT_PREFIX ../
           RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
           LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
+          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+          )
       endif()
     endif()
 
-    set_target_properties(${SWIG_MODULE_${python_name}Python_REAL_NAME}
+    set_target_properties(
+      ${SWIG_MODULE_${python_name}Python_REAL_NAME}
       PROPERTIES
-      OUTPUT_NAME "_${python_name}")
+      OUTPUT_NAME "_${python_name}"
+      )
 
+    set(
+      PYTHON_INSTALL_DIR
+      ${CMAKE_INSTALL_PREFIX}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
+      )
     string(TOUPPER ${python_name} python_name_upper)
-    set(${python_name_upper}_PYTHON
-      ${CMAKE_INSTALL_PREFIX}/lib/python/${python_name}.py)
+    set(
+      ${python_name_upper}_PYTHON
+      ${PYTHON_INSTALL_DIR}/${python_name}.py
+      )
     get_directory_property(${python_name}Parent PARENT_DIRECTORY)
     if(NOT "${${python_name}Parent}" STREQUAL "")
-      set(${python_name_upper}_PYTHON ${${python_name_upper}_PYTHON}
-        PARENT_SCOPE)
+      set(
+        ${python_name_upper}_PYTHON
+        ${${python_name_upper}_PYTHON}
+        PARENT_SCOPE
+        )
     endif()
 
-    install(FILES ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${python_name}.py
-      DESTINATION lib/python)
-    install(TARGETS ${SWIG_MODULE_${python_name}Python_REAL_NAME}
-      DESTINATION lib/python)
+    install(
+      FILES ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${python_name}.py
+      DESTINATION ${PYTHON_INSTALL_DIR}
+      )
+    install(
+      TARGETS ${SWIG_MODULE_${python_name}Python_REAL_NAME}
+      DESTINATION ${PYTHON_INSTALL_DIR}
+      )
   endmacro()
 endif()
 
@@ -212,9 +237,11 @@ endif()
 if(XDMF_WRAP_JAVA)
   find_package(Java REQUIRED)
   find_package(JNI REQUIRED)
-  include_directories(${CMAKE_CURRENT_SOURCE_DIR}
+  include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}
     ${JAVA_INCLUDE_PATH}
-    ${JAVA_INCLUDE_PATH2})
+    ${JAVA_INCLUDE_PATH2}
+    )
 
   # A macro to swig and create the jar files
   # Since we essentually do the same thing inside and outside core, it
@@ -237,15 +264,17 @@ if(XDMF_WRAP_JAVA)
     swig_link_libraries(${java_name}Java ${java_name})
 
     if(WIN32)
-	  if(NOT MSVC10)
-        set_target_properties(${SWIG_MODULE_${java_name}Java_REAL_NAME}
+      if(NOT MSVC10)
+        set_target_properties(
+          ${SWIG_MODULE_${java_name}Java_REAL_NAME}
           PROPERTIES
           PREFIX ../
           IMPORT_PREFIX ../
           RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
           LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
-	  endif()
+          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+          )
+      endif()
       set(java_files *.java)
       set(java_dest "bin")
       set(separator "\;")
@@ -260,11 +289,13 @@ if(XDMF_WRAP_JAVA)
       COMMAND ${CMAKE_COMMAND} -E make_directory ${XDMF_JAVA_DIR})
     add_custom_target(Compiled_${java_name}_Jar ALL DEPENDS
       ${${java_name}_JAVA_JAR})
-    add_custom_command(OUTPUT ${${java_name}_JAVA_JAR}
+    add_custom_command(
+      OUTPUT ${${java_name}_JAVA_JAR}
       COMMAND ${CMAKE_COMMAND} -E chdir ${XDMF_JAVA_PACKAGE_DIR}
               ${JAVA_COMPILE} -cp \".${java_cp_jars}\" ${java_files}
       COMMAND ${JAVA_ARCHIVE} -cvf ${${java_name}_JAVA_JAR}
-             "${XDMF_JAVA_PACKAGE_DIR}/*.class")
+             "${XDMF_JAVA_PACKAGE_DIR}/*.class"
+             )
     add_dependencies(${java_name}Java ${java_name}_Java_Dir)
     add_dependencies(Compiled_${java_name}_Jar ${java_name}Java)
 
@@ -279,12 +310,17 @@ if(XDMF_WRAP_JAVA)
 
     set(java_cp_jars "${java_cp_jars}${separator}${${java_name}_JAVA_JAR}")
     string(TOUPPER ${java_name} java_name_upper)
-    set(${java_name_upper}_JAVA_JAR
-      ${CMAKE_INSTALL_PREFIX}/lib/java/${java_name}.jar)
+    set(
+      ${java_name_upper}_JAVA_JAR
+      ${CMAKE_INSTALL_PREFIX}/lib/java/${java_name}.jar
+      )
     get_directory_property(${java_name}Parent PARENT_DIRECTORY)
     if(NOT "${${java_name}Parent}" STREQUAL "")
-      set(${java_name_upper}_JAVA_JAR ${${java_name_upper}_JAVA_JAR}
-        PARENT_SCOPE)
+      set(
+        ${java_name_upper}_JAVA_JAR
+        ${${java_name_upper}_JAVA_JAR}
+        PARENT_SCOPE
+        )
       set(java_cp_jars "${java_cp_jars}" PARENT_SCOPE)
     endif()
 
@@ -299,6 +335,8 @@ add_subdirectory(core)
 include_directories(${XdmfCore_INCLUDE_DIRS} ${XdmfDSM_INCLUDE_DIRS})
 link_directories(${XDMF_LIBRARY_DIRS})
 
+include(GNUInstallDirs)
+
 option(XDMF_BUILD_CORE_ONLY OFF)
 mark_as_advanced(XDMF_BUILD_CORE_ONLY)
 if(NOT XDMF_BUILD_CORE_ONLY)
@@ -328,7 +366,8 @@ if(NOT XDMF_BUILD_CORE_ONLY)
     XdmfTime
     XdmfTopology
     XdmfTopologyType
-    XdmfUnstructuredGrid)
+    XdmfUnstructuredGrid
+    )
 
   if(XDMF_STATIC_AND_SHARED)
     add_library(XdmfObjects OBJECT ${XdmfSources})
@@ -360,27 +399,35 @@ if(NOT XDMF_BUILD_CORE_ONLY)
 
   if(WIN32)
     if (BUILD_SHARED_LIBS)
-      set_target_properties(${XDMF_LIBNAME} PROPERTIES
-        DEFINE_SYMBOL XDMF_EXPORTS)
+      set_target_properties(
+        ${XDMF_LIBNAME} PROPERTIES
+        DEFINE_SYMBOL XDMF_EXPORTS
+        )
       if(XDMF_STATIC_AND_SHARED)
-        set_target_properties(Xdmf_Static PROPERTIES
-          DEFINE_SYMBOL Xdmf_EXPORTS)
+        set_target_properties(
+          Xdmf_Static PROPERTIES
+          DEFINE_SYMBOL Xdmf_EXPORTS
+          )
       endif()
     endif ()
     if(NOT MSVC10)
-      set_target_properties(${XDMF_LIBNAME} PROPERTIES
+      set_target_properties(
+        ${XDMF_LIBNAME} PROPERTIES
         PREFIX ../
         IMPORT_PREFIX ../
         RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/
         LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/
-        ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/)
+        ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/
+        )
       if(XDMF_STATIC_AND_SHARED AND BUILD_SHARED_LIBS)
-        set_target_properties(Xdmf_Static PROPERTIES
+        set_target_properties(
+          Xdmf_Static PROPERTIES
           PREFIX ../
           IMPORT_PREFIX ../
           RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/
           LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/
-          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/)
+          ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/
+          )
       endif ()
     endif()
   endif()
@@ -412,41 +459,59 @@ if(NOT XDMF_BUILD_CORE_ONLY)
   endif()
 
   if(WIN32)
-    set(XDMF_LIBRARY ${CMAKE_INSTALL_PREFIX}/lib/${XDMF_LIBNAME}.lib)
+    set(XDMF_LIBRARY ${CMAKE_INSTALL_LIBDIR}/${XDMF_LIBNAME}.lib)
   endif()
-  
+
   if(UNIX)
     if (BUILD_SHARED_LIBS)
-      set(XDMF_LIBRARY ${CMAKE_INSTALL_PREFIX}/lib/lib${XDMF_LIBNAME}.so)
+      set(XDMF_LIBRARY ${CMAKE_INSTALL_LIBDIR}/lib${XDMF_LIBNAME}.so)
     else (BUILD_SHARED_LIBS)
-      set(XDMF_LIBRARY ${CMAKE_INSTALL_PREFIX}/lib/lib${XDMF_LIBNAME}.a)
+      set(XDMF_LIBRARY ${CMAKE_INSTALL_LIBDIR}/lib${XDMF_LIBNAME}.a)
     endif (BUILD_SHARED_LIBS)
   endif(UNIX)
 
   if(APPLE)
-    set(XDMF_LIBRARY ${CMAKE_INSTALL_PREFIX}/lib/lib${XDMF_LIBNAME}.dylib)
+    set(XDMF_LIBRARY ${CMAKE_INSTALL_LIBDIR}/lib${XDMF_LIBNAME}.dylib)
   endif()
-  
-  file(GLOB XdmfHeaders 
-    "*.hpp" 
-    "*.tpp" 
-    "*.i" 
+
+  file(GLOB XdmfHeaders
+    "*.hpp"
+    "*.tpp"
+    "*.i"
     "CMake/VersionSuite/*.hpp"
     "${CMAKE_CURRENT_BINARY_DIR}/*.hpp"
   )
-  install(FILES ${XdmfHeaders} DESTINATION include)
-  install(TARGETS ${XDMF_LIBNAME}
-    RUNTIME DESTINATION bin
-    LIBRARY DESTINATION lib
-    ARCHIVE DESTINATION lib)
+
+  install(
+    FILES ${XdmfHeaders}
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+    )
+  install(
+    TARGETS ${XDMF_LIBNAME}
+    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT bin
+    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib  # .so
+    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib  # .a
+    PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}" COMPONENT dev
+    )
   if (XDMF_STATIC_AND_SHARED AND BUILD_SHARED_LIBS)
-    install(TARGETS Xdmf_Static
-      RUNTIME DESTINATION bin
-      LIBRARY DESTINATION lib
-      ARCHIVE DESTINATION lib)
+    install(
+      TARGETS Xdmf_Static
+      RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT bin
+      LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib  # .so
+      ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib  # .a
+      PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}" COMPONENT dev
+      )
   endif()
 endif()
 
+if(WIN32 AND NOT CYGWIN)
+  set(DEF_INSTALL_CMAKE_DIR CMake)
+else()
+  set(DEF_INSTALL_CMAKE_DIR
+    "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+endif()
 xdmf_create_config_file(${PROJECT_NAME})
-install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-  DESTINATION ${CMAKE_INSTALL_PREFIX})
+install(
+  FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+  DESTINATION ${DEF_INSTALL_CMAKE_DIR}
+  )
