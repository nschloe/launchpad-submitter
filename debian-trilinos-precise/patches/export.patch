Description: enhance the CMake export machanism of Trilinos
Author: Nico Schl√∂mer <nico.schloemer@gmail.com>
Bug: https://software.sandia.gov/bugzilla/show_bug.cgi?id=5900
Last-Update: 2014-03-08
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
diff --git a/cmake/tribits/installation/TribitsProjectConfigTemplate.cmake.in b/cmake/tribits/installation/TribitsProjectConfigTemplate.cmake.in
index b1e2d9c..0c56039 100644
--- a/cmake/tribits/installation/TribitsProjectConfigTemplate.cmake.in
+++ b/cmake/tribits/installation/TribitsProjectConfigTemplate.cmake.in
@@ -91,22 +91,62 @@ SET(${PROJECT_NAME}_AR ${CMAKE_AR})
 SET(${PROJECT_NAME}_VERSION "${${PROJECT_NAME}_VERSION}")
 
 ## The project include file directories.
-SET(${PROJECT_NAME}_INCLUDE_DIRS "${${PROJECT_NAME}_CONFIG_INCLUDE_DIRS}")
+#SET(${PROJECT_NAME}_INCLUDE_DIRS "${${PROJECT_NAME}_CONFIG_INCLUDE_DIRS}")
 
 ## The project library directories.
-SET(${PROJECT_NAME}_LIBRARY_DIRS "${${PROJECT_NAME}_CONFIG_LIBRARY_DIRS}")
+#SET(${PROJECT_NAME}_LIBRARY_DIRS "${${PROJECT_NAME}_CONFIG_LIBRARY_DIRS}")
 
 ## The project libraries.
-SET(${PROJECT_NAME}_LIBRARIES "${${PROJECT_NAME}_CONFIG_LIBRARIES}")
+#SET(${PROJECT_NAME}_LIBRARIES "${${PROJECT_NAME}_CONFIG_LIBRARIES}")
 
 ## The project tpl include paths
-SET(${PROJECT_NAME}_TPL_INCLUDE_DIRS "${${PROJECT_NAME}_CONFIG_TPL_INCLUDE_DIRS}")
+#SET(${PROJECT_NAME}_TPL_INCLUDE_DIRS "${${PROJECT_NAME}_CONFIG_TPL_INCLUDE_DIRS}")
 
 ## The project tpl library paths
-SET(${PROJECT_NAME}_TPL_LIBRARY_DIRS "${${PROJECT_NAME}_CONFIG_TPL_LIBRARY_DIRS}")
+#SET(${PROJECT_NAME}_TPL_LIBRARY_DIRS "${${PROJECT_NAME}_CONFIG_TPL_LIBRARY_DIRS}")
 
 ## The project tpl libraries
-SET(${PROJECT_NAME}_TPL_LIBRARIES "${${PROJECT_NAME}_CONFIG_TPL_LIBRARIES}")
+#SET(${PROJECT_NAME}_TPL_LIBRARIES "${${PROJECT_NAME}_CONFIG_TPL_LIBRARIES}")
+
+# For best practices in handling of components, see
+# <https://github.com/Kitware/CMake/blob/master/Modules/readme.txt>.
+#
+# If components were requested, include only those. If not, include all of
+# Trilinos.
+IF (${PROJECT_NAME}_FIND_COMPONENTS)
+    SET(COMPONENTS_LIST ${PDOLLAR}{${PROJECT_NAME}_FIND_COMPONENTS})
+ELSE()
+    SET(COMPONENTS_LIST ${FULL_PACKAGE_SET})
+ENDIF()
+
+# Initialize ${PROJECT_NAME}_FOUND with true, and set it to FALSE if any of
+# the required components wasn't found.
+SET(${PROJECT_NAME}_FOUND TRUE)
+FOREACH(comp ${PDOLLAR}{COMPONENTS_LIST})
+   SET(INCLUDE_FILE ${PDOLLAR}{CMAKE_CURRENT_LIST_DIR}/../${PDOLLAR}{comp}/${PDOLLAR}{comp}Config.cmake)
+   IF (EXISTS ${PDOLLAR}{INCLUDE_FILE})
+       # Set ${PROJECT_NAME}_<component>_FOUND.
+       SET(${PROJECT_NAME}_${PDOLLAR}{comp}_FOUND TRUE)
+       # Include the package file.
+       INCLUDE(${PDOLLAR}{CMAKE_CURRENT_LIST_DIR}/../${PDOLLAR}{comp}/${PDOLLAR}{comp}Config.cmake)
+       # Add variables to lists.
+       LIST(APPEND ${PROJECT_NAME}_INCLUDE_DIRS     ${PDOLLAR}{${PDOLLAR}{comp}_INCLUDE_DIRS})
+       LIST(APPEND ${PROJECT_NAME}_LIBRARY_DIRS     ${PDOLLAR}{${PDOLLAR}{comp}_LIBRARY_DIRS})
+       LIST(APPEND ${PROJECT_NAME}_LIBRARIES        ${PDOLLAR}{${PDOLLAR}{comp}_LIBRARIES})
+       LIST(APPEND ${PROJECT_NAME}_TPL_INCLUDE_DIRS ${PDOLLAR}{${PDOLLAR}{comp}_TPL_INCLUDE_DIRS})
+       LIST(APPEND ${PROJECT_NAME}_TPL_LIBRARY_DIRS ${PDOLLAR}{${PDOLLAR}{comp}_TPL_LIBRARY_DIRS})
+       LIST(APPEND ${PROJECT_NAME}_TPL_LIBRARIES    ${PDOLLAR}{${PDOLLAR}{comp}_TPL_LIBRARIES})
+   ELSE()
+       # Component not found.
+       MESSAGE(WARNING "Component \"${PDOLLAR}{comp}\" NOT found.")
+       # Set ${PROJECT_NAME}_<component>_FOUND to FALSE.
+       SET(${PROJECT_NAME}_${PDOLLAR}{comp}_FOUND FALSE)
+       # Set ${PROJECT_NAME}_FOUND to FALSE if component is not optional.
+       IF(${PROJECT_NAME}_FIND_REQUIRED_${PDOLLAR}{comp})
+           SET(${PROJECT_NAME}_FOUND FALSE)
+       ENDIF()
+   ENDIF()
+ENDFOREACH()
 
 ## ---------------------------------------------------------------------------
 ## MPI specific variables
@@ -131,4 +171,4 @@ SET(${PROJECT_NAME}_PACKAGE_LIST "${FULL_PACKAGE_SET}")
 ## The TPLs enabled for this project
 SET(${PROJECT_NAME}_TPL_LIST "${FULL_TPL_SET}")
 
-${PROJECT_CONFIG_CODE}
+#${PROJECT_CONFIG_CODE}
diff --git a/cmake/tribits/package_arch/TribitsWriteClientExportFiles.cmake b/cmake/tribits/package_arch/TribitsWriteClientExportFiles.cmake
index 5c1373b..e667922 100644
--- a/cmake/tribits/package_arch/TribitsWriteClientExportFiles.cmake
+++ b/cmake/tribits/package_arch/TribitsWriteClientExportFiles.cmake
@@ -353,7 +353,7 @@ FUNCTION(TRIBITS_WRITE_FLEXIBLE_PACKAGE_CLIENT_EXPORT_FILES)
   #We will use the complete list of supported tpls for the project
   #to help us create a properly ordered list of tpls.
   IF (FULL_TPL_SET)
-    SET(ORDERED_FULL_TPL_SET ${FULL_TPL_SET}) 
+    SET(ORDERED_FULL_TPL_SET ${FULL_TPL_SET})
     TRIBITS_SORT_LIST_ACCORDING_TO_MASTER_LIST("${${PROJECT_NAME}_REVERSE_TPLS}"
       ORDERED_FULL_TPL_SET)
   ENDIF()
@@ -405,7 +405,7 @@ FUNCTION(TRIBITS_WRITE_FLEXIBLE_PACKAGE_CLIENT_EXPORT_FILES)
 
     # Custom code in configuration file.
     SET(PACKAGE_CONFIG_CODE "")
-  
+
     # Import build tree targets into applications.
     IF(FULL_LIBRARY_SET)
       SET(PACKAGE_CONFIG_CODE "${PACKAGE_CONFIG_CODE}
@@ -426,7 +426,7 @@ ENDIF()
 
   #
   # G) Create the export makefile for the build tree
-  # 
+  #
   # This is the equivalent of the cmake version only slightly changed so that
   # it can be directly imported into a Makefile.
   #
@@ -541,7 +541,7 @@ ENDFUNCTION()
 #
 # The INSTALL() commands must be in a different subroutine or CMake will not
 # allow you to call the rountine, even if you if() it out!
-# 
+#
 
 FUNCTION(TRIBITS_WRITE_PROJECT_CLIENT_EXPORT_FILES_INSTALL_TARGETS PACKAGE_NAME)
 
@@ -719,6 +719,12 @@ ENDIF()
   SET(PROJECT_CONFIG_CODE "${PROJECT_CONFIG_CODE}\n${LOAD_CODE}")
 
   IF (${PROJECT_NAME}_ENABLE_INSTALL_CMAKE_CONFIG_FILES)
+    # In TribitsProjectConfigTemplate.cmake.in, we would like to preserve
+    # ${}-variables after the conversion to TribitsProjectConfigTemplate.cmake.
+    # To this end, one typically uses the @-syntax for variables. That doesn't
+    # support nested variables, however. Use ${PDOLLAR} as a workaround, cf.
+    # <http://www.cmake.org/pipermail/cmake/2013-April/054341.html>.
+    SET(PDOLLAR "$")
     CONFIGURE_FILE(
       ${${PROJECT_NAME}_TRIBITS_DIR}/${TRIBITS_CMAKE_INSTALLATION_FILES_DIR}/TribitsProjectConfigTemplate.cmake.in
       ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake )
@@ -803,6 +809,12 @@ ENDIF()
   SET(PROJECT_CONFIG_CODE "${PROJECT_CONFIG_CODE}\n${LOAD_CODE}")
 
   IF (${PROJECT_NAME}_ENABLE_INSTALL_CMAKE_CONFIG_FILES)
+    # In TribitsProjectConfigTemplate.cmake.in, we would like to preserve
+    # ${}-variables after the conversion to TribitsProjectConfigTemplate.cmake.
+    # To this end, one typically uses the @-syntax for variables. That doesn't
+    # support nested variables, however. Use ${PDOLLAR} as a workaround, cf.
+    # <http://www.cmake.org/pipermail/cmake/2013-April/054341.html>.
+    SET(PDOLLAR "$")
     CONFIGURE_FILE(
       ${${PROJECT_NAME}_TRIBITS_DIR}/${TRIBITS_CMAKE_INSTALLATION_FILES_DIR}/TribitsProjectConfigTemplate.cmake.in
       ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config_install.cmake )
